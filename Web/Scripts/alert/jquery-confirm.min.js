!function (t) { "function" == typeof define && define.amd ? define(["jquery", "window"], t) : "object" == typeof module && module.exports ? module.exports = function (i, n) { return void 0 === n && (n = "undefined" != typeof window ? require("jquery") : require("jquery")(i)), t(n, window), n } : t(jQuery, window) }(function (t, i) { "use strict"; var n, e; t.fn.confirm = function (i, e) { return void 0 === i && (i = {}), "string" == typeof i && (i = { content: i, title: e || !1 }), t(this).each(function () { var e = t(this); e.attr("jc-attached") ? console.warn("jConfirm has already been attached to this element ", e[0]) : (e.on("click", function (s) { s.preventDefault(); var o = t.extend({}, i); if (e.attr("data-title") && (o.title = e.attr("data-title")), e.attr("data-content") && (o.content = e.attr("data-content")), void 0 === o.buttons && (o.buttons = {}), o.$target = e, e.attr("href") && 0 === Object.keys(o.buttons).length) { var a = t.extend(!0, {}, n.pluginDefaults.defaultButtons, (n.defaults || {}).defaultButtons || {}), c = Object.keys(a)[0]; o.buttons = a, o.buttons[c].action = function () { location.href = e.attr("href") } } o.closeIcon = !1; t.confirm(o) }), e.attr("jc-attached", !0)) }), t(this) }, t.confirm = function (i, e) { void 0 === i && (i = {}), "string" == typeof i && (i = { content: i, title: e || !1 }); var s = !(!1 === i.buttons); if ("object" != typeof i.buttons && (i.buttons = {}), 0 === Object.keys(i.buttons).length && s) { var o = t.extend(!0, {}, n.pluginDefaults.defaultButtons, (n.defaults || {}).defaultButtons || {}); i.buttons = o } return n(i) }, t.alert = function (i, e) { void 0 === i && (i = {}), "string" == typeof i && (i = { content: i, title: e || !1 }); var s = !(!1 === i.buttons); if ("object" != typeof i.buttons && (i.buttons = {}), 0 === Object.keys(i.buttons).length && s) { var o = t.extend(!0, {}, n.pluginDefaults.defaultButtons, (n.defaults || {}).defaultButtons || {}), a = Object.keys(o)[0]; i.buttons[a] = o[a] } return n(i) }, t.dialog = function (t, i) { return void 0 === t && (t = {}), "string" == typeof t && (t = { content: t, title: i || !1, closeIcon: function () { } }), t.buttons = {}, void 0 === t.closeIcon && (t.closeIcon = function () { }), t.confirmKeys = [13], n(t) }, n = function (i) { void 0 === i && (i = {}); var s = t.extend(!0, {}, n.pluginDefaults); n.defaults && (s = t.extend(!0, s, n.defaults)), s = t.extend(!0, {}, s, i); var o = new e(s); return n.instances.push(o), o }, (e = function (i) { t.extend(this, i), this._init() }).prototype = { _init: function () { var i = this; n.instances.length || (n.lastFocused = t("body").find(":focus")), this._id = Math.round(99999 * Math.random()), this.contentParsed = t(document.createElement("div")), this.lazyOpen || setTimeout(function () { i.open() }, 0) }, _buildHTML: function () { var i = this; this._parseAnimation(this.animation, "o"), this._parseAnimation(this.closeAnimation, "c"), this._parseBgDismissAnimation(this.backgroundDismissAnimation), this._parseColumnClass(this.columnClass), this._parseTheme(this.theme), this._parseType(this.type); var n = t(this.template); n.find(".jconfirm-box").addClass(this.animationParsed).addClass(this.backgroundDismissAnimationParsed).addClass(this.typeParsed), this.typeAnimated && n.find(".jconfirm-box").addClass("jconfirm-type-animated"), this.useBootstrap ? (n.find(".jc-bs3-row").addClass(this.bootstrapClasses.row), n.find(".jc-bs3-row").addClass("justify-content-md-center justify-content-sm-center justify-content-xs-center justify-content-lg-center"), n.find(".jconfirm-box-container").addClass(this.columnClassParsed), this.containerFluid ? n.find(".jc-bs3-container").addClass(this.bootstrapClasses.containerFluid) : n.find(".jc-bs3-container").addClass(this.bootstrapClasses.container)) : n.find(".jconfirm-box").css("width", this.boxWidth), this.titleClass && n.find(".jconfirm-title-c").addClass(this.titleClass), n.addClass(this.themeParsed); var e = "jconfirm-box" + this._id; n.find(".jconfirm-box").attr("aria-labelledby", e).attr("tabindex", -1), n.find(".jconfirm-content").attr("id", e), null !== this.bgOpacity && n.find(".jconfirm-bg").css("opacity", this.bgOpacity), this.rtl && n.addClass("jconfirm-rtl"), this.$el = n.appendTo(this.container), this.$jconfirmBoxContainer = this.$el.find(".jconfirm-box-container"), this.$jconfirmBox = this.$body = this.$el.find(".jconfirm-box"), this.$jconfirmBg = this.$el.find(".jconfirm-bg"), this.$title = this.$el.find(".jconfirm-title"), this.$titleContainer = this.$el.find(".jconfirm-title-c"), this.$content = this.$el.find("div.jconfirm-content"), this.$contentPane = this.$el.find(".jconfirm-content-pane"), this.$icon = this.$el.find(".jconfirm-icon-c"), this.$closeIcon = this.$el.find(".jconfirm-closeIcon"), this.$holder = this.$el.find(".jconfirm-holder"), this.$btnc = this.$el.find(".jconfirm-buttons"), this.$scrollPane = this.$el.find(".jconfirm-scrollpane"), i.setStartingPoint(), this._contentReady = t.Deferred(), this._modalReady = t.Deferred(), this.$holder.css({ "padding-top": this.offsetTop, "padding-bottom": this.offsetBottom }), this.setTitle(), this.setIcon(), this._setButtons(), this._parseContent(), this.initDraggable(), this.isAjax && this.showLoading(!1), t.when(this._contentReady, this._modalReady).then(function () { i.isAjaxLoading ? setTimeout(function () { i.isAjaxLoading = !1, i.setContent(), i.setTitle(), i.setIcon(), setTimeout(function () { i.hideLoading(!1), i._updateContentMaxHeight() }, 100), "function" == typeof i.onContentReady && i.onContentReady() }, 50) : (i._updateContentMaxHeight(), i.setTitle(), i.setIcon(), "function" == typeof i.onContentReady && i.onContentReady()), i.autoClose && i._startCountDown() }), this._watchContent(), "none" === this.animation && (this.animationSpeed = 1, this.animationBounce = 1), this.$body.css(this._getCSS(this.animationSpeed, this.animationBounce)), this.$contentPane.css(this._getCSS(this.animationSpeed, 1)), this.$jconfirmBg.css(this._getCSS(this.animationSpeed, 1)), this.$jconfirmBoxContainer.css(this._getCSS(this.animationSpeed, 1)) }, _typePrefix: "jconfirm-type-", typeParsed: "", _parseType: function (t) { this.typeParsed = this._typePrefix + t }, setType: function (t) { var i = this.typeParsed; this._parseType(t), this.$jconfirmBox.removeClass(i).addClass(this.typeParsed) }, themeParsed: "", _themePrefix: "jconfirm-", setTheme: function (t) { var i = this.theme; this.theme = t || this.theme, this._parseTheme(this.theme), i && this.$el.removeClass(i), this.$el.addClass(this.themeParsed), this.theme = t }, _parseTheme: function (i) { var n = this; i = i.split(","), t.each(i, function (e, s) { -1 === s.indexOf(n._themePrefix) && (i[e] = n._themePrefix + t.trim(s)) }), this.themeParsed = i.join(" ").toLowerCase() }, backgroundDismissAnimationParsed: "", _bgDismissPrefix: "jconfirm-hilight-", _parseBgDismissAnimation: function (i) { var n = i.split(","), e = this; t.each(n, function (i, s) { -1 === s.indexOf(e._bgDismissPrefix) && (n[i] = e._bgDismissPrefix + t.trim(s)) }), this.backgroundDismissAnimationParsed = n.join(" ").toLowerCase() }, animationParsed: "", closeAnimationParsed: "", _animationPrefix: "jconfirm-animation-", setAnimation: function (t) { this.animation = t || this.animation, this._parseAnimation(this.animation, "o") }, _parseAnimation: function (i, n) { n = n || "o"; var e = i.split(","), s = this; t.each(e, function (i, n) { -1 === n.indexOf(s._animationPrefix) && (e[i] = s._animationPrefix + t.trim(n)) }); var o = e.join(" ").toLowerCase(); return "o" === n ? this.animationParsed = o : this.closeAnimationParsed = o, o }, setCloseAnimation: function (t) { this.closeAnimation = t || this.closeAnimation, this._parseAnimation(this.closeAnimation, "c") }, setAnimationSpeed: function (t) { this.animationSpeed = t || this.animationSpeed }, columnClassParsed: "", setColumnClass: function (t) { this.useBootstrap ? (this.columnClass = t || this.columnClass, this._parseColumnClass(this.columnClass), this.$jconfirmBoxContainer.addClass(this.columnClassParsed)) : console.warn("cannot set columnClass, useBootstrap is set to false") }, _updateContentMaxHeight: function () { var n = t(i).height() - (this.$jconfirmBox.outerHeight() - this.$contentPane.outerHeight()) - (this.offsetTop + this.offsetBottom); this.$contentPane.css({ "max-height": n + "px" }) }, setBoxWidth: function (t) { this.useBootstrap ? console.warn("cannot set boxWidth, useBootstrap is set to true") : (this.boxWidth = t, this.$jconfirmBox.css("width", t)) }, _parseColumnClass: function (t) { var i; switch (t = t.toLowerCase()) { case "xl": case "xlarge": i = "col-md-12"; break; case "l": case "large": i = "col-md-8 col-md-offset-2"; break; case "m": case "medium": i = "col-md-6 col-md-offset-3"; break; case "s": case "small": i = "col-md-4 col-md-offset-4"; break; case "xs": case "xsmall": i = "col-md-2 col-md-offset-5"; break; default: i = t }this.columnClassParsed = i }, initDraggable: function () { var n = this, e = this.$titleContainer; this.resetDrag(), this.draggable && (e.on("mousedown", function (t) { e.addClass("jconfirm-hand"), n.mouseX = t.clientX, n.mouseY = t.clientY, n.isDrag = !0 }), t(i).on("mousemove." + this._id, function (t) { n.isDrag && (n.movingX = t.clientX - n.mouseX + n.initialX, n.movingY = t.clientY - n.mouseY + n.initialY, n.setDrag()) }), t(i).on("mouseup." + this._id, function () { e.removeClass("jconfirm-hand"), n.isDrag && (n.isDrag = !1, n.initialX = n.movingX, n.initialY = n.movingY) })) }, resetDrag: function () { this.isDrag = !1, this.initialX = 0, this.initialY = 0, this.movingX = 0, this.movingY = 0, this.mouseX = 0, this.mouseY = 0, this.$jconfirmBoxContainer.css("transform", "translate(0px, 0px)") }, setDrag: function () { if (this.draggable) { this.alignMiddle = !1; var n = this.$jconfirmBox.outerWidth(), e = this.$jconfirmBox.outerHeight(), s = t(i).width(), o = t(i).height(); if (this.movingX % 1 == 0 || this.movingY % 1 == 0) { if (this.dragWindowBorder) { var a = s / 2 - n / 2, c = o / 2 - e / 2; c -= this.dragWindowGap, (a -= this.dragWindowGap) + this.movingX < 0 ? this.movingX = -a : a - this.movingX < 0 && (this.movingX = a), c + this.movingY < 0 ? this.movingY = -c : c - this.movingY < 0 && (this.movingY = c) } this.$jconfirmBoxContainer.css("transform", "translate(" + this.movingX + "px, " + this.movingY + "px)") } } }, _scrollTop: function () { if ("undefined" != typeof pageYOffset) return pageYOffset; var t = document.body, i = document.documentElement; return (i = i.clientHeight ? i : t).scrollTop }, _watchContent: function () { var n = this; this._timer && clearInterval(this._timer); var e = 0; this._timer = setInterval(function () { if (n.smoothContent) { var s = n.$content.outerHeight() || 0; s !== e && (n.$contentPane.css({ height: s }).scrollTop(0), e = s); var o = t(i).height(); n.offsetTop + n.offsetBottom + n.$jconfirmBox.height() - n.$contentPane.height() + n.$content.height() < o ? n.$contentPane.addClass("no-scroll") : n.$contentPane.removeClass("no-scroll") } }, this.watchInterval) }, _overflowClass: "jconfirm-overflow", _hilightAnimating: !1, highlight: function () { this.hiLightModal() }, hiLightModal: function () { var t = this; if (!this._hilightAnimating) { t.$body.addClass("hilight"); var i = parseFloat(t.$body.css("animation-duration")) || 2; this._hilightAnimating = !0, setTimeout(function () { t._hilightAnimating = !1, t.$body.removeClass("hilight") }, 1e3 * i) } }, _bindEvents: function () { var n = this; this.boxClicked = !1, this.$scrollPane.click(function (t) { if (!n.boxClicked) { var i, e = !1, s = !1; if ("string" == typeof (i = "function" == typeof n.backgroundDismiss ? n.backgroundDismiss() : n.backgroundDismiss) && void 0 !== n.buttons[i] ? (e = i, s = !1) : s = void 0 === i || !0 == !!i, e) { var o = n.buttons[e].action.apply(n); s = void 0 === o || !!o } s ? n.close() : n.hiLightModal() } n.boxClicked = !1 }), this.$jconfirmBox.click(function (t) { n.boxClicked = !0 }); var e = !1; t(i).on("jcKeyDown." + n._id, function (t) { e || (e = !0) }), t(i).on("keyup." + n._id, function (t) { e && (n.reactOnKey(t), e = !1) }), t(i).on("resize." + this._id, function () { n._updateContentMaxHeight(), setTimeout(function () { n.resetDrag() }, 100) }) }, _cubic_bezier: "0.36, 0.55, 0.19", _getCSS: function (t, i) { return { "-webkit-transition-duration": t / 1e3 + "s", "transition-duration": t / 1e3 + "s", "-webkit-transition-timing-function": "cubic-bezier(" + this._cubic_bezier + ", " + i + ")", "transition-timing-function": "cubic-bezier(" + this._cubic_bezier + ", " + i + ")" } }, _setButtons: function () { var i = this, n = 0; if ("object" != typeof this.buttons && (this.buttons = {}), t.each(this.buttons, function (e, s) { n += 1, "function" == typeof s && (i.buttons[e] = s = { action: s }), i.buttons[e].text = s.text || e, i.buttons[e].btnClass = s.btnClass || "btn-default", i.buttons[e].action = s.action || function () { }, i.buttons[e].keys = s.keys || [], i.buttons[e].isHidden = s.isHidden || !1, i.buttons[e].isDisabled = s.isDisabled || !1, t.each(i.buttons[e].keys, function (t, n) { i.buttons[e].keys[t] = n.toLowerCase() }); var o = t('<button type="button" class="btn"></button>').html(i.buttons[e].text).addClass(i.buttons[e].btnClass).prop("disabled", i.buttons[e].isDisabled).css("display", i.buttons[e].isHidden ? "none" : "").click(function (t) { t.preventDefault(); var n = i.buttons[e].action.apply(i, [i.buttons[e]]); i.onAction.apply(i, [e, i.buttons[e]]), i._stopCountDown(), (void 0 === n || n) && i.close() }); i.buttons[e].el = o, i.buttons[e].setText = function (t) { o.html(t) }, i.buttons[e].addClass = function (t) { o.addClass(t) }, i.buttons[e].removeClass = function (t) { o.removeClass(t) }, i.buttons[e].disable = function () { i.buttons[e].isDisabled = !0, o.prop("disabled", !0) }, i.buttons[e].enable = function () { i.buttons[e].isDisabled = !1, o.prop("disabled", !1) }, i.buttons[e].show = function () { i.buttons[e].isHidden = !1, o.css("display", "") }, i.buttons[e].hide = function () { i.buttons[e].isHidden = !0, o.css("display", "none") }, i["$_" + e] = i["$$" + e] = o, i.$btnc.append(o) }), 0 === n && this.$btnc.hide(), null === this.closeIcon && 0 === n && (this.closeIcon = !0), this.closeIcon) { if (this.closeIconClass) { var e = '<i class="' + this.closeIconClass + '"></i>'; this.$closeIcon.html(e) } this.$closeIcon.click(function (t) { t.preventDefault(); var n, e = !1, s = !1; if ("string" == typeof (n = "function" == typeof i.closeIcon ? i.closeIcon() : i.closeIcon) && void 0 !== i.buttons[n] ? (e = n, s = !1) : s = void 0 === n || !0 == !!n, e) { var o = i.buttons[e].action.apply(i); s = void 0 === o || !!o } s && i.close() }), this.$closeIcon.show() } else this.$closeIcon.hide() }, setTitle: function (t, i) { if (i = i || !1, void 0 !== t) if ("string" == typeof t) this.title = t; else if ("function" == typeof t) { "function" == typeof t.promise && console.error("Promise was returned from title function, this is not supported."); var n = t(); this.title = "string" == typeof n && n } else this.title = !1; this.isAjaxLoading && !i || (this.$title.html(this.title || ""), this.updateTitleContainer()) }, setIcon: function (t, i) { if (i = i || !1, void 0 !== t) if ("string" == typeof t) this.icon = t; else if ("function" == typeof t) { var n = t(); this.icon = "string" == typeof n && n } else this.icon = !1; this.isAjaxLoading && !i || (this.$icon.html(this.icon ? '<i class="' + this.icon + '"></i>' : ""), this.updateTitleContainer()) }, updateTitleContainer: function () { this.title || this.icon ? this.$titleContainer.show() : this.$titleContainer.hide() }, setContentPrepend: function (t, i) { t && this.contentParsed.prepend(t) }, setContentAppend: function (t) { t && this.contentParsed.append(t) }, setContent: function (t, i) { i = !!i; var n = this; t && this.contentParsed.html("").append(t), this.isAjaxLoading && !i || (this.$content.html(""), this.$content.append(this.contentParsed), setTimeout(function () { n.$body.find("input[autofocus]:visible:first").focus() }, 100)) }, loadingSpinner: !1, showLoading: function (t) { this.loadingSpinner = !0, this.$jconfirmBox.addClass("loading"), t && this.$btnc.find("button").prop("disabled", !0) }, hideLoading: function (t) { this.loadingSpinner = !1, this.$jconfirmBox.removeClass("loading"), t && this.$btnc.find("button").prop("disabled", !1) }, ajaxResponse: !1, contentParsed: "", isAjax: !1, isAjaxLoading: !1, _parseContent: function () { var i = this, n = "&nbsp;"; if ("function" == typeof this.content) { var e = this.content.apply(this); "string" == typeof e ? this.content = e : "object" == typeof e && "function" == typeof e.always ? (this.isAjax = !0, this.isAjaxLoading = !0, e.always(function (t, n, e) { i.ajaxResponse = { data: t, status: n, xhr: e }, i._contentReady.resolve(t, n, e), "function" == typeof i.contentLoaded && i.contentLoaded(t, n, e) }), this.content = n) : this.content = n } if ("string" == typeof this.content && "url:" === this.content.substr(0, 4).toLowerCase()) { this.isAjax = !0, this.isAjaxLoading = !0; var s = this.content.substring(4, this.content.length); t.get(s).done(function (t) { i.contentParsed.html(t) }).always(function (t, n, e) { i.ajaxResponse = { data: t, status: n, xhr: e }, i._contentReady.resolve(t, n, e), "function" == typeof i.contentLoaded && i.contentLoaded(t, n, e) }) } this.content || (this.content = n), this.isAjax || (this.contentParsed.html(this.content), this.setContent(), i._contentReady.resolve()) }, _stopCountDown: function () { clearInterval(this.autoCloseInterval), this.$cd && this.$cd.remove() }, _startCountDown: function () { var i = this, n = this.autoClose.split("|"); if (2 !== n.length) return console.error("Invalid option for autoClose. example 'close|10000'"), !1; var e = n[0], s = parseInt(n[1]); if (void 0 === this.buttons[e]) return console.error("Invalid button key '" + e + "' for autoClose"), !1; var o = Math.ceil(s / 1e3); this.$cd = t('<span class="countdown"> (' + o + ")</span>").appendTo(this["$_" + e]), this.autoCloseInterval = setInterval(function () { i.$cd.html(" (" + (o -= 1) + ") "), o <= 0 && (i["$$" + e].trigger("click"), i._stopCountDown()) }, 1e3) }, _getKey: function (t) { switch (t) { case 192: return "tilde"; case 13: return "enter"; case 16: return "shift"; case 9: return "tab"; case 20: return "capslock"; case 17: return "ctrl"; case 91: return "win"; case 18: return "alt"; case 27: return "esc"; case 32: return "space" }var i = String.fromCharCode(t); return !!/^[A-z0-9]+$/.test(i) && i.toLowerCase() }, reactOnKey: function (i) { var n = this, e = t(".jconfirm"); if (e.eq(e.length - 1)[0] !== this.$el[0]) return !1; var s = i.which; if (this.$content.find(":input").is(":focus") && /13|32/.test(s)) return !1; var o = this._getKey(s); if ("esc" === o && this.escapeKey) if (!0 === this.escapeKey) this.$scrollPane.trigger("click"); else if ("string" == typeof this.escapeKey || "function" == typeof this.escapeKey) { var a; (a = "function" == typeof this.escapeKey ? this.escapeKey() : this.escapeKey) && (void 0 === this.buttons[a] ? console.warn("Invalid escapeKey, no buttons found with key " + a) : this["$_" + a].trigger("click")) } t.each(this.buttons, function (t, i) { -1 !== i.keys.indexOf(o) && n["$_" + t].trigger("click") }) }, setDialogCenter: function () { console.info("setDialogCenter is deprecated, dialogs are centered with CSS3 tables") }, _unwatchContent: function () { clearInterval(this._timer) }, close: function (e) { var s = this; return "function" == typeof this.onClose && this.onClose(e), this._unwatchContent(), t(i).unbind("resize." + this._id), t(i).unbind("keyup." + this._id), t(i).unbind("jcKeyDown." + this._id), this.draggable && (t(i).unbind("mousemove." + this._id), t(i).unbind("mouseup." + this._id), this.$titleContainer.unbind("mousedown")), s.$el.removeClass(s.loadedClass), t("body").removeClass("jconfirm-no-scroll-" + s._id), s.$jconfirmBoxContainer.removeClass("jconfirm-no-transition"), setTimeout(function () { s.$body.addClass(s.closeAnimationParsed), s.$jconfirmBg.addClass("jconfirm-bg-h"); var e = "none" === s.closeAnimation ? 1 : s.animationSpeed; setTimeout(function () { s.$el.remove(); n.instances; for (var e = n.instances.length - 1; e >= 0; e--)n.instances[e]._id === s._id && n.instances.splice(e, 1); if (!n.instances.length && s.scrollToPreviousElement && n.lastFocused && n.lastFocused.length && t.contains(document, n.lastFocused[0])) { var o = n.lastFocused; if (s.scrollToPreviousElementAnimate) { var a = t(i).scrollTop(), c = n.lastFocused.offset().top, r = t(i).height(); if (c > a && c < a + r) o.focus(); else { var l = c - Math.round(r / 3); t("html, body").animate({ scrollTop: l }, s.animationSpeed, "swing", function () { o.focus() }) } } else o.focus(); n.lastFocused = !1 } "function" == typeof s.onDestroy && s.onDestroy() }, .4 * e) }, 50), !0 }, open: function () { return !this.isOpen() && (this._buildHTML(), this._bindEvents(), this._open(), !0) }, setStartingPoint: function () { var e = !1; if (!0 !== this.animateFromElement && this.animateFromElement) e = this.animateFromElement, n.lastClicked = !1; else { if (!n.lastClicked || !0 !== this.animateFromElement) return !1; e = n.lastClicked, n.lastClicked = !1 } if (!e) return !1; var s = e.offset(), o = e.outerHeight() / 2, a = e.outerWidth() / 2; o -= this.$jconfirmBox.outerHeight() / 2, a -= this.$jconfirmBox.outerWidth() / 2; var c = s.top + o; c -= this._scrollTop(); var r = s.left + a, l = t(i).height() / 2, d = t(i).width() / 2; if (c -= l - this.$jconfirmBox.outerHeight() / 2, r -= d - this.$jconfirmBox.outerWidth() / 2, Math.abs(c) > l || Math.abs(r) > d) return !1; this.$jconfirmBoxContainer.css("transform", "translate(" + r + "px, " + c + "px)") }, _open: function () { var t = this; "function" == typeof t.onOpenBefore && t.onOpenBefore(), this.$body.removeClass(this.animationParsed), this.$jconfirmBg.removeClass("jconfirm-bg-h"), this.$body.focus(), t.$jconfirmBoxContainer.css("transform", "translate(0px, 0px)"), setTimeout(function () { t.$body.css(t._getCSS(t.animationSpeed, 1)), t.$body.css({ "transition-property": t.$body.css("transition-property") + ", margin" }), t.$jconfirmBoxContainer.addClass("jconfirm-no-transition"), t._modalReady.resolve(), "function" == typeof t.onOpen && t.onOpen(), t.$el.addClass(t.loadedClass) }, this.animationSpeed) }, loadedClass: "jconfirm-open", isClosed: function () { return !this.$el || "" === this.$el.css("display") }, isOpen: function () { return !this.isClosed() }, toggle: function () { this.isOpen() ? this.close() : this.open() } }, n.instances = [], n.lastFocused = !1, n.pluginDefaults = { template: '<div class="jconfirm"><div class="jconfirm-bg jconfirm-bg-h"></div><div class="jconfirm-scrollpane"><div class="jconfirm-row"><div class="jconfirm-cell"><div class="jconfirm-holder"><div class="jc-bs3-container"><div class="jc-bs3-row"><div class="jconfirm-box-container jconfirm-animated"><div class="jconfirm-box" role="dialog" aria-labelledby="labelled" tabindex="-1"><div class="jconfirm-closeIcon">&times;</div><div class="jconfirm-title-c"><span class="jconfirm-icon-c"></span><span class="jconfirm-title"></span></div><div class="jconfirm-content-pane"><div class="jconfirm-content"></div></div><div class="jconfirm-buttons"></div><div class="jconfirm-clear"></div></div></div></div></div></div></div></div></div></div>', title: "Hello", titleClass: "", type: "default", typeAnimated: !0, draggable: !0, dragWindowGap: 15, dragWindowBorder: !0, animateFromElement: !0, alignMiddle: !0, smoothContent: !0, content: "Are you sure to continue?", buttons: {}, defaultButtons: { ok: { action: function () { } }, close: { action: function () { } } }, contentLoaded: function () { }, icon: "", lazyOpen: !1, bgOpacity: null, theme: "light", animation: "scale", closeAnimation: "scale", animationSpeed: 400, animationBounce: 1, escapeKey: !0, rtl: !1, container: "body", containerFluid: !1, backgroundDismiss: !1, backgroundDismissAnimation: "shake", autoClose: !1, closeIcon: null, closeIconClass: !1, watchInterval: 100, columnClass: "col-md-4 col-md-offset-4 col-sm-6 col-sm-offset-3 col-xs-10 col-xs-offset-1", boxWidth: "50%", scrollToPreviousElement: !0, scrollToPreviousElementAnimate: !0, useBootstrap: !0, offsetTop: 40, offsetBottom: 40, bootstrapClasses: { container: "container", containerFluid: "container-fluid", row: "row" }, onContentReady: function () { }, onOpenBefore: function () { }, onOpen: function () { }, onClose: function () { }, onDestroy: function () { }, onAction: function () { } }; var s = !1; t(i).on("keydown", function (n) { if (!s) { var e = !1; t(n.target).closest(".jconfirm-box").length && (e = !0), e && t(i).trigger("jcKeyDown"), s = !0 } }), t(i).on("keyup", function () { s = !1 }), n.lastClicked = !1, t(document).on("mousedown", "button, a", function () { n.lastClicked = t(this) }) });